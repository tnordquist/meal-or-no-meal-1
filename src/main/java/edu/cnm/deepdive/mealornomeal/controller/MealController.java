package edu.cnm.deepdive.mealornomeal.controller;

import edu.cnm.deepdive.mealornomeal.model.entity.Calendar;
import edu.cnm.deepdive.mealornomeal.model.entity.Meal;
import edu.cnm.deepdive.mealornomeal.model.entity.User;
import edu.cnm.deepdive.mealornomeal.model.service.MealRepository;
import edu.cnm.deepdive.mealornomeal.model.service.UserRepository;
import java.util.List;
import java.util.NoSuchElementException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.server.ExposesResourceFor;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

/**
 * The MealController controls the details of a Meal entity when it is created or modified.
 * It also allows a User to search for meals, edit meals they have created, and delete meals.
 */

@RestController
@RequestMapping("/meals")
@ExposesResourceFor(Meal.class)
public class MealController {

  private final MealRepository mealRepository;
  private final UserRepository userRepository;

  /**
   * A consturctor that creates contextualized instances of the Meal and User repositories.
   * @param - Takes a mealRepository parameter
   * @param - Takes a userRepository parameter
   */
  @Autowired
  public MealController(MealRepository mealRepository,
      UserRepository userRepository) {
    this.mealRepository = mealRepository;
    this.userRepository = userRepository;
  }

  /**
   * Allows the user to get a specific Meal entity with a specific ID.
   * @param id - the Meal's Primary Key and identifier
   * @return - returns the Meal with the specified ID
   * @throws - throws a NoSuchElementException if there is no existing Meal with the provided ID
   */
  @GetMapping(value = "/{id:\\d+}", produces = MediaType.APPLICATION_JSON_VALUE)
  public Meal get(@PathVariable long id, Authentication auth) {
    return mealRepository.findById(id).orElseThrow(NoSuchElementException::new);
  }

  /**
   * Allows the user to get a list of Meals sorted by the ID of the user who created them.
   */
  @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
  public Iterable<Meal> getMeals(Authentication auth) {return mealRepository.getAllByOrderByCreator_IdAsc();}

  /**
   * Allows the user to search for meals with names that contain a specified String.
   * It returns all matching meals in ascending alphabetical order.
   * @param filter - A String input provided by the user.
   * @return - All meals with names that contain the String filter.
   */
  @GetMapping(value = "/search", produces = MediaType.APPLICATION_JSON_VALUE)
  public Iterable<Meal> search(@RequestParam(name = "q", required = true) String filter, Authentication auth) {
    return mealRepository.getAllByNameContainingOrderByNameAsc(filter);
  }

  /**
   * Allows the user to POST a Meal entity and assigns the user's ID as the creator ID associated with that meal.
   * @param meal - A meal entity containing at minimum a name, an autogenerated ID, and an instruction attribute.
   * @return - Returns a response from the server that the Meal has been created and shows the created meal.
   */
  @PostMapping(
      consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
  public ResponseEntity<Meal> postCreator(@RequestBody Meal meal, Authentication auth) {
    if (meal.getCreator() != null && meal.getCreator().getId() != null) {
      meal.setCreator(userRepository.findById(
              meal.getCreator().getId()
          ).orElseThrow(NoSuchElementException::new));
    }
    return ResponseEntity.created(meal.getHref()).body(meal);
  }

  /**
   * Allows the user to edit the name of a meal they have created.
   * @param id - ID associated with the specific meal
   * @param name - The body of the Meal entity containing the Name attribute the user is editing
   * @return - Returns the current Meal entity with the newly updated Name
   */

  @PutMapping(value = "/{id:\\d+}/meal-name",
  consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.TEXT_PLAIN_VALUE}, produces = MediaType.APPLICATION_JSON_VALUE)
  public Meal putName(@PathVariable long id, @RequestBody String name, Authentication auth) {
    Meal existingMeal = get(id, auth);
      existingMeal.setName(name);
    return mealRepository.save(existingMeal);
  }

  /**
   * Allows the user to edit the instruction of a meal they have created.
   * @param id - ID associated with the specific meal
   * @param recipe - The body of the Meal entity containing the Instruction attribute the user is editing
   * @return - Returns the current Meal entity with the newly updated Instruction
   */
  @PutMapping(value = "/{id:\\d+}/instruction",
      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.TEXT_PLAIN_VALUE}, produces = MediaType.APPLICATION_JSON_VALUE)
  public Meal putInstruction(@PathVariable long id, @RequestBody String recipe, Authentication auth) {
    Meal existingMeal = get(id, auth);
      existingMeal.setInstruction(recipe);
    return mealRepository.save(existingMeal);
  }

  /**
   * Allows the user to edit the prep time of a meal they have created.
   * @param id - ID associated with the specific meal
   * @param prepTime - The body of the Meal entity containing the PrepTime attribute the user is editing
   * @return - Returns the current Meal entity with the newly updated PrepTime
   */

  @PutMapping(value = "/{id:\\d+}/prep",
      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.TEXT_PLAIN_VALUE}, produces = MediaType.APPLICATION_JSON_VALUE)
  public Meal putPrepTime(@PathVariable long id, @RequestBody int prepTime, Authentication auth) {
    Meal existingMeal = get(id, auth);
      existingMeal.setPrepTime(prepTime);
    return mealRepository.save(existingMeal);
  }

  /**
   * Allows the user to edit the requirement of a meal they have created.
   * @param id - ID associated with the specific meal
   * @param requirements - The body of the Meal entity containing the Requirement attribute the user is editing
   * @return - Returns the current Meal entity with the newly updated Requirement
   */

  @PutMapping(value = "/{id:\\d+}/requirements",
      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.TEXT_PLAIN_VALUE}, produces = MediaType.APPLICATION_JSON_VALUE)
  public Meal putRequirements(@PathVariable long id, @RequestBody String requirements, Authentication auth) {
    Meal existingMeal = get(id, auth);
      existingMeal.setRequirements(requirements);
    return mealRepository.save(existingMeal);
  }

  /**
   * Allows the user to delete a Meal they have created
   * @param id - ID associated with the specific meal they would like to delete
   */
  // TODO set Calendar meal slots containing deleted meal to null
  @DeleteMapping(value = "/{id:\\d+}")
  @ResponseStatus(HttpStatus.NO_CONTENT)
  public void delete(@PathVariable long id, Authentication auth) {
    mealRepository.delete(get(id, auth));
  }

  }
