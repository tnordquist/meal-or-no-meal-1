package edu.cnm.deepdive.mealornomeal.model.entity;

import edu.cnm.deepdive.mealornomeal.view.FlatMeal;
import java.net.URI;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.server.EntityLinks;
import org.springframework.stereotype.Component;

/**
 * The Meal Entity class lists methods for the attributes of the Meal in the application: Id,
 * Name, Instructionm (recipe), Prep Time, Requirements (tools needed to cook the meal), and Creator Id.
 * The Meal entity is used in conjunction with the Calendar entity to place a meal in a certain timeslot in a calendar.
 * The Meal entity also works with the ListItem and Ingredients entities to populate a grocery list comprised of the
 * ingredients needed to make the meals that are scheduled.
 */

@SuppressWarnings("JpaDataSourceORMInspection")
@Entity
@Component
@Table(
    indexes = {
        @Index(columnList = "name")
    }
)
public class Meal implements FlatMeal {

  private static EntityLinks entityLinks;
  /**
   * The column Id in the database that contains the Primary Key for a specific Meal in type Long. This
   * Id is autogenerated, cannot be null, and cannot be updated.
   */
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "meal_id", nullable = false, updatable = false)
  private Long id;

  /**
   * The column Name in the database that contains the name for a specific Meal in String format. The
   * max String length is 100 characters and it cannot be null.
   */

  @Column(name = "name", length = 100, nullable = false)
  private String name;

  /**
   * The column Instruction in the database that contains the recipe for a specific Meal in String format.
   * The max length of the Insruction is 5000 characters and it cannot be null.
   */

  @Column(name = "instruction", length = 5000, nullable = false)
  private String instruction;

  /**
   * The column PrepTime in the database that contains the length of time in Integer minutes to prepare
   * a specific Meal.
   */

  @Column(name = "prep_time")
  private Integer prepTime;

  /**
   * The column Requirements in the database that contains the tools needed in String format to prepare
   * a specific Meal. The max length of the Requirements is 200 characters.
   */

  @Column(name = "requirements", length = 200)
  private String required;

  /**
   * The column CreatorId in the database that contains the Id of the contributor of a specific Meal.
   * This is a foreign key in the Meal Entity and is used to join the Meal and User entities by User Id.
   * It has a Many-to-One relationship with User.
   */

  @ManyToOne(fetch = FetchType.EAGER,
  cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.REFRESH})
  @JoinColumn(name = "creator_id")
  private User creator;

  @OneToMany(mappedBy = "meal", fetch = FetchType.LAZY,
      cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
  @OrderBy("name")
  private List<Ingredient> ingredients;

  /**
   * Gets Id for a specific meal in type Long
   */

  public Long getId() {
    return id;
  }

  /**
   * Gets Name for a specific meal in type String
   *
   */

  public String getName() {
    return name;
  }

  /**
   * Sets the Name for a specific meal in type String. Takes a String parameter.
   *
   */

  public void setName(String name) {
    this.name = name;
  }

  /**
   * Gets Instructions for a specific meal in type String
   *
   */

  public String getInstruction() {
    return instruction;
  }

  /**
   * Sets the Instruction for a specific meal in type String. Takes a String parameter.
   */

  public void setInstruction(String instruction) {
    this.instruction = instruction;
  }

  /**
   * Gets PrepTime for a specific meal in type Integer. Takes an Integer parameter.
   *
   */

  public Integer getPrepTime() {
    return prepTime;
  }

  /**
   * Sets the amount of time in minutes to prepare a specific meal as type Integer. Takes an Integer
   * parameter.
   *
   */

  public void setPrepTime(Integer prepTime) {
    this.prepTime = prepTime;
  }

  /**
   * Gets Requirements for a specific meal in type String.
   *
   */

  public String getRequirements() {
    return required;
  }

  /**
   * Sets the Requirements to prepare a specific meal in type String. Takes a String parameter.
   *
   */

  public void setRequirements(String requirements) {
    this.required = requirements;
  }

  /**
   * Returns the User Id who created the specific Meal entity in Long format.
   */

  public User getCreator() {
    return creator;
  }

  /**
   * Sets the Id of the creator of the specific Meal entity to the UserId of
   * current user.
   */

  public void setCreator(User creator) {
    this.creator = creator;
  }

  public List<Ingredient> getIngredients() {
    return ingredients;
  }

  /**
   * The PostConstruct annotation is used on the method that needs to be executed after dependency injection
   */
  @PostConstruct
  private void initHateoas() {
    //noinspection ResultOfMethodCallIgnored
    entityLinks.toString();
  }
  /**
   * This Method with the @AutoWired annotation removes the properties element in the XML.
   * Takes an entityLinks parameter.
   */
  @Autowired
  private void setEntityLinks(
      @SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection") EntityLinks entityLinks) {
    Meal.entityLinks = entityLinks;
  }
  /**
   * ???
   */
  @Override
  public URI getHref() {
    return (id != null) ? entityLinks.linkForItemResource(Meal.class, id).toUri() : null;
  }

}
